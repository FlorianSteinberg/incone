From mathcomp Require Import ssreflect ssrfun seq.
From rlzrs Require Import all_mf.
Require Import baire cont.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Local Open Scope baire_scope.
Section baire_product.
  Context (Q A Q' A': Type) (a: A) (a': A').  
  Notation B:= (Q -> A).
  Notation B' := (Q' -> A').
  
  Definition lprj (phipsi: Q + Q' -> A * A') q := (phipsi (inl q)).1.
  Definition rprj (phipsi: Q + Q' -> A * A') q := (phipsi (inr q)).2.

  Definition pair (phi: B * B'):=
    fun c => match c with
	     | inl s => (phi.1 s, a')
	     | inr t => (a, phi.2 t)
	     end.

  Lemma lprj_pair phi psi: lprj (pair (phi, psi)) =  phi.
  Proof. by trivial. Qed.
  
  Lemma rprj_pair phi psi: rprj (pair (phi,psi)) =  psi.
  Proof. by trivial. Qed.

  Lemma pair_spec phi: phi = (lprj (pair phi), rprj (pair phi)).
  Proof. by case: phi. Qed.

  Lemma lprj_cont: (F2MF lprj) \is_continuous.
  Proof.
    by rewrite cont_F2MF => phi; exists (fun q => [:: inl q]) => psi q' [eq _]; rewrite /lprj eq.
  Qed.
  
  Lemma rprj_cont: (F2MF rprj) \is_continuous.
  Proof.
    by rewrite cont_F2MF => phi; exists (fun q => [:: inr q]) => psi q' [eq _]; rewrite /rprj eq.
  Qed.

End baire_product.
Arguments lprj {Q} {A} {Q'} {A'}.
Arguments rprj {Q} {A} {Q'} {A'}.
Arguments pair {Q} {A} {Q'} {A'}.

Section diagonal_mapping.
  Context (Q A: Type) (a: A).
  Notation B := (Q -> A).
  Definition diag (phi: B) q:=
    match q with
    | inl q' => (phi q', a)
    | inr q' => (a, phi q')
    end.

  Lemma diag_spec phi: diag phi = pair a a (phi, phi).
  Proof. done. Qed.

  Lemma diag_cont: (F2MF diag) \is_continuous.
  Proof.
    apply/cont_F2MF => phi.
    exists (fun q => match q with
                     | inl q' => [:: q']
                     | inr q' => [:: q']
                     end) => [[] q psi []];
    by rewrite /diag => ->.
  Qed.
End diagonal_mapping.

Section baire_fprd.
  Context (Q Q' A A' S S' T T': Type).
  Notation B:= (Q -> A).
  Notation B':= (Q' -> A').
  Notation D:= (S -> T).
  Notation D':= (S' -> T').

  Definition fprd a t (F: B ->> B') (G: D ->> D'):=
    make_mf (fun (phipsi: Q + S -> A * T) FphiGpsi =>
	       FphiGpsi = pair a t (lprj FphiGpsi, rprj FphiGpsi)
	       /\
	       (F ** G) (lprj phipsi, rprj phipsi) (lprj FphiGpsi, rprj FphiGpsi)).

  Lemma fprd_cont a t F G: F \is_continuous -> G \is_continuous -> (fprd a t F G) \is_continuous.
  Proof.
    have mapl: forall K (q: Q), List.In q K -> List.In ((@inl _ S) q) (map inl K).
    elim => // q K ih q' /=listin; by case: listin => ass; [left; rewrite -ass | right; apply ih].
    have mapr: forall K (q:S), List.In q K -> List.In ((@inr Q _) q) (map inr K).
    elim => // q K ih q' /=listin; by case: listin => ass; [left; rewrite -ass | right; apply ih].
    rewrite !cont_spec => cont cont' phi [FGphi [np [/=FphiFGphi GphiFGphi]]].
    have [ | Lf mod]:= cont (lprj phi); first by exists (lprj FGphi).
    have [ | Lf' mod']:= cont' (rprj phi); first by exists (rprj FGphi).
    exists (fun qq' => match qq' with
	               | inl q => map inl (Lf q)
	               | inr q' => map inr (Lf' q')
                       end) => [[q | q']].
    - have [a' crt]:= mod q; exists (FGphi (inl q)).
      move => psi /coin_lstn coin Fpsi [ np' [/=val'l val'r]].
      rewrite np np'; apply injective_projections => //=.
      rewrite (crt (lprj phi) _ (lprj FGphi))//; last exact/coin_ref.
      rewrite (crt (lprj psi) _ (lprj Fpsi))// coin_lstn /lprj => q' lstn.
      by rewrite (coin (inl q')) //; apply (mapl (Lf q) q').
    have [a' crt]:= mod' q'; exists (FGphi (inr q')).
    move => psi /coin_lstn coin Fpsi [ np' [/=val'l val'r]].
    rewrite np np'; apply injective_projections => //=.
    rewrite (crt (rprj phi) _ (rprj FGphi))//; last exact/coin_ref.
    rewrite (crt (rprj psi) _ (rprj Fpsi))// coin_lstn /rprj => q lstn.
    by rewrite (coin (inr q)) //; apply (mapr (Lf' q') q).
  Qed.

  Definition lcry_rlzr (X Y Z: cs) (F: names (X \*_cs Y) ->> names Z) (phi: questions X):
    questions Y ->> questions Z:=
    (make_mf (fun psi Fphipsi => F (name_pair phi psi) Fphipsi)).
  
  Lemma lcry_rlzr_spec (X Y Z: cs) F (f: X \*_cs Y ->> Z) phi x:
    F \realizes f -> phi \describes x \wrt X ->
    (lcry_rlzr F phi) \realizes (lcry f x).
  Proof.
    move => rlzr phinx psi y psiny xyfd.
    by have []//:= rlzr (name_pair phi psi) (x, y).
  Qed.
  
  Fixpoint collect_right S T (L: seq (S + T)) :=
    match L with
    | nil => nil
    | a :: L' => match a with
                 | inr b => b :: (collect_right L')
                 | inl _ => collect_right L'
                 end
    end.
  
  Lemma lcry_rlzr_cntop (X Y Z: cs) (F: names (X \*_cs Y) ->> names Z) phi:
    F \is_continuous_operator -> (lcry_rlzr F phi) \is_continuous_operator.
  Proof.
    rewrite !cont_spec => cont psi [Fphipsi /= val].
    have [ | mf mod]:= cont (name_pair phi psi); first by exists Fphipsi.
    exists (fun q => collect_right (mf q)) => q.
    exists (Fphipsi q) => psi' coin Fphipsi' val'.
    have [a' crt]:= mod q; apply/(crt_icf val crt)/val'.
    by elim: (mf q) coin => // [[q' L ih /=/ih | q' L ih /= [-> /ih]]].
  Qed.

  Lemma lcry_hcr (X Y Z: cs) (f: X \*_cs Y ->> Z) x:
    f \has_continuous_realizer -> (lcry f x) \has_continuous_realizer.
  Proof.
    move => [F [rlzr cont]].
    have [phi phinx]:= get_description x.  
    exists (make_mf (fun psi Fphipsi => F (name_pair phi psi) Fphipsi)).
    by split; [exact/lcry_rlzr_spec | exact/lcry_rlzr_cntop].
  Qed.

  Lemma lcry_cont (X Y Z: cs) (f: X * Y -> Z) x:
    f \is_continuous -> (lcry_f f x) \is_continuous.
  Proof. by move => cont; rewrite /continuous F2MF_lcry; exact/lcry_hcr. Qed.

  Definition rcry_f S T R (f: S * T -> R) t s := f (s, t).
  
  Definition rcry S T R (f: S * T ->> R) t := make_mf (fun s fst => f (s, t) fst).

  Lemma F2MF_rcry S T R (f: S * T -> R) t:
    F2MF (rcry_f f t) =~= rcry (F2MF f) t.
  Proof. done. Qed.

  Definition rcry_p S T R (f: S * T -> option R) t s := f (s, t).
  
  Lemma PF2MF_rcry S T R (f: S * T -> option R) t:
    PF2MF (rcry_p f t) =~= rcry (PF2MF f) t.
  Proof. done. Qed.

  Definition rcry_rlzr (X Y Z: cs) (F: names (X \*_cs Y) ->> names Z) (psi: questions Y):
    questions X ->> questions Z:=
    make_mf (fun phi Fphipsi => F (name_pair phi psi) Fphipsi).

  Lemma rcry_rlzr_spec (X Y Z: cs) F (f: X \*_cs Y ->> Z) psi y:
    F \realizes f -> psi \describes y \wrt Y ->
    (rcry_rlzr F psi) \realizes (rcry f y).
  Proof.
    move => rlzr psiny phi x phinx xyfd.
    by have []//:= rlzr (name_pair phi psi) (x, y).
  Qed.
  
  Fixpoint collect_left S T (L: seq (S + T)) :=
    match L with
    | nil => nil
    | a :: L' => match a with
                 | inl b => b :: (collect_left L')
                 | inr _ => collect_left L'
                 end
    end.
  
  Lemma rcry_rlzr_cntop (X Y Z: cs) F psi:
    F \is_continuous_operator -> (@rcry_rlzr X Y Z F psi) \is_continuous_operator.
  Proof.
    rewrite !cont_spec => cont phi [Fphipsi /= val].
    have [ | mf mod]:= cont (name_pair phi psi); first by exists Fphipsi.
    exists (fun q => collect_left (mf q)) => q.
    exists (Fphipsi q) => psi' coin Fphipsi' val'.
    have [a' crt]:= mod q; apply/(crt_icf val crt)/val'.
    by elim: (mf q) coin => // [[q' L ih /= [-> /ih] | q' L ih /= /ih]].
  Qed.

  Lemma rcry_hcr (X Y Z: cs) (f: X * Y ->> Z) y:
    f \has_continuous_realizer -> (rcry f y) \has_continuous_realizer.
  Proof.
    move => [F [rlzr cont]].
    have [psi psiny]:= get_description y.  
    exists (rcry_rlzr F psi).
    by split; [exact/rcry_rlzr_spec | exact/rcry_rlzr_cntop].
  Qed.

  Lemma rcry_cont (X Y Z: cs) (f: X * Y -> Z) y:
    f \is_continuous -> (rcry_f f y) \is_continuous.
  Proof. by move => cont; rewrite /continuous F2MF_rcry; exact/rcry_hcr. Qed.
End products.

Lemma fprd_cont (X Y X' Y': cs) (f: X -> Y) (g: X' -> Y'):
  f \is_continuous -> g \is_continuous -> (f **_f g) \is_continuous.
Proof.
by move => cont cont' ; rewrite /continuous F2MF_fprd; apply/fprd_hcr.
Qed.
